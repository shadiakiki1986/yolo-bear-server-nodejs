var AWS = require("aws-sdk");
var doc = require('dynamodb-doc'); // https://www.npmjs.com/package/dynamodb-doc
var config = require('app/config.json');

AWS.config.update({region: config.AWS_REGION});

// JS Class declaration
// For nodejs exports, check bottom of file
var Tournament = function() {
  this.dynamo = new doc.DynamoDB();
};

Tournament.prototype.list = function(context) {
  this.dynamo.scan(
    { "TableName":"yolo-bear-tournaments" },
    function(err,data) {
      if(err!=null) {
        context.fail("Error listing tournaments. "+err);
        return;
      }

      // no data
      if(data==null||Object.keys(data).length==0) {
        context.succeed("{}");
        return;
      }

      // at this point, data.Items is an array of objects as follows
      // { key: value,
      //   email: 'Chajoubr@dm.net.lb',
      // }
      context.succeed(data.Items);

    }
  );
};

Tournament.prototype.drop=function(name, password, context) {

  var self = this;
  var context2 = {
    fail: context.fail,
    succeed: function(data,exists) {
      self.dynamo.deleteItem({
          "TableName":"yolo-bear-tournaments",
          "Key":{"tournamentName":name}
      }, function(err,data) {
          if(err!=null) {
            context.fail("Failed to remove from ddb. "+err);
            return;
          }
          context.succeed();
      }); 
    }
  };

  this.get(
    name,
    context2,
    true, // fail on not exist
    password
  );
};

Tournament.prototype.get = function(name, context2, failOnNotExist, password) {
  this.dynamo.getItem({
      "TableName":"yolo-bear-tournaments",
      "Key":{"tournamentName":name}
  }, function(err,data) {

    if(err!=null) {
      context2.fail("Failed to check existence in ddb. "+err);
      return;
    }

    var exists = data!=null && data.Item!=null && Object.keys(data.Item).length!=0;

    if(typeof failOnNotExist!=='undefined' && failOnNotExist) {
      if(!exists) {
        context2.fail("Key doesnt exist");
        return;
      }
    }

    if(typeof password!=='undefined' && password) {
      if(exists && password!=data.Item.tournamentPassword) {
        context2.fail("Wrong password");
        return;
      }
    }

    context2.succeed(data.Item,exists);
  });
};

Tournament.prototype.new = function(name, password, data, context) {

  var self = this;
  this.get(
    name,
    { fail: context.fail,
      succeed: function(data2,exists) {
        self.dynamo.putItem({
           "TableName":"yolo-bear-tournaments",
           "Item":{tournamentName:name,tournamentPassword:password,tournamentData:data}
        },function(err,data) {
           if(err!=null) {
             // http://docs.aws.amazon.com/lambda/latest/dg/programming-model.html
             context.fail("Failed to put to dynamodb. "+err);
             return;
           }
           // return
           context.succeed();
        });
      },
    },
    false, // fail on not exist
    password
  );

};

Tournament.prototype.Tournament = Tournament;

module.exports = function () {
  return new Tournament();
};
