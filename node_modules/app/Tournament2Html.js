// JS Class declaration
// For nodejs exports, check bottom of file
var Tournament2Html = function(item) {
  if(!item.hasOwnProperty("tournamentName")) throw("Missing tournamentName field");
  if(!item.hasOwnProperty("tournamentData")) throw("Missing tournamentData field");

  if(typeof item.tournamentData=="string"&&typeof item.tournamentData!="object") item.tournamentData=JSON.parse(item.tournamentData);

  if(!item['tournamentData'].hasOwnProperty('teams')) throw("Missing teams field");
  if(!item['tournamentData'].hasOwnProperty('players')) throw("Missing players field");
  if(!item['tournamentData'].hasOwnProperty('games')) throw("Missing games field");

  this.item = item;
  this.statNames=["Score", "Assists", "Rebounds", "Steals", "Blockshots"];
  this.logo = "http://shadiakiki1986.github.io/yolo-bear/client/img/logo.png";
  this.gameStates=["Waiting","Done","Playing"];

  this.url="https://v029nrk9h7.execute-api.us-west-2.amazonaws.com/prod/yolo-bear-get?tournamentName="+this.item['tournamentName']+"&format=html";
  this.descr=this.item['tournamentData']['teams'].length+" team(s), "+
    this.item['tournamentData']['players'].length+" player(s), "+
    this.item['tournamentData']['games'].length+" game(s)";

};

Tournament2Html.prototype.echoAsTh = function(x) {
  var o =[];
  x.forEach(function(sn) { o.push("<th>"+sn+"</th>"); });
  return o.join("");
};

Tournament2Html.prototype.teamPlayers = function(teamId,ps) {
  return ps.filter(function(p) { return p['teamId']==teamId; }); // players filtered by team
}

Tournament2Html.prototype.playerStatsByStatName = function (gs,sn) {
// $gs: gameStats field in player field
// $sn: stat name, i.e. Score, Assists, Rebounds, Steals, Blockshots
  var o = gs.map(function(gsi) { return gsi[sn]; });
  o = o.reduce(function(a,b) { return a+b; }, 0);
  return o;
}

Tournament2Html.prototype.teamStatsByStatName = function(teamId,ps,sn) {
// $teamId: team ID
// $ps: players field in tournamentData
// $sn: stat name, i.e. Score, Assists, Rebounds, Steals, Blockshots
  var ps2=this.teamPlayers(teamId,ps);
  var self = this;
  ps2 = ps2.map(function(p) { return self.playerStatsByStatName(p['gameStats'],sn); });
  ps2 = ps2.reduce(function(a,b) { return a+b; }, 0);
  return ps2;
}

Tournament2Html.prototype.teamById = function(teamId, phpArray) {
  var t1=phpArray['tournamentData']['teams'].filter(function(t) { return t['id']==teamId; });
  if(t1.length!=1) throw("Error identifying team in game"); 
  return t1[0];
}

Tournament2Html.prototype.header = function() {
  var o = [];
  o.push("<title>"+this.item['tournamentName']+"</title>");
  o.push("<meta property='og:image' content='"+this.logo+"' />");
  o.push("<meta property='og:title' content='"+this.item['tournamentName']+"' />");
  o.push("<meta property='og:url' content='"+this.url+"' />");
  o.push("<meta property='og:description' content='"+this.descr+"' />");
  o.push("<meta property='og:site_name' content='Yolo bear' />");
  o.push("<meta property='og:type' content='article' />");

  return o.join("");
};

Tournament2Html.prototype.body1 = function() {
  var o = [];
  o.push("<div id='fb-root'></div>");

  // https://developers.facebook.com/docs/plugins/share-button

  // Note that I created yolo-bear as an app on facebook to get a new app ID
  o.push("<script>"+
  "  window.fbAsyncInit = function() {"+
  "    FB.init({"+
  "      appId      : '894833157233421',"+
  "      xfbml      : true,"+
  "      version    : 'v2.3'"+
  "    });"+
  "  };"+
  "  (function(d, s, id){"+
  "     var js, fjs = d.getElementsByTagName(s)[0];"+
  "     if (d.getElementById(id)) {return;}"+
  "     js = d.createElement(s); js.id = id;"+
  "     js.src = '//connect.facebook.net/en_US/sdk.js';"+
  "     fjs.parentNode.insertBefore(js, fjs);"+
  "   }(document, 'script', 'facebook-jssdk'));"+
  "</script>");
  o.push("<img src='"+this.logo+"'>");
  o.push("<h1>Yolo-bear tournament: "+this.item['tournamentName']+"</h1>");
  o.push("<div class='fb-share-button' data-href='"+this.url+"' data-layout='button'></div>"); // button_count

  return o.join("");
};

Tournament2Html.prototype.body2 = function() {
  var o = [];
  o.push("<div id='fb-root'></div>");
  o.push("<table border=1><caption>Teams ("+this.item['tournamentData']['teams'].length+")</caption>");
  o.push("<tr>");
  o.push("<th>Team</th>");
  o.push(this.echoAsTh(this.statNames));
  o.push("<th>Players</th>");
  o.push("</tr>");
  var self = this;
  this.item['tournamentData']['teams'].forEach(function(t) {
    o.push("<tr><td>"+t['name']+"</td>");
    self.statNames.forEach(function(sn) {
      o.push("<td>"+self.teamStatsByStatName(t['id'],self.item['tournamentData']['players'],sn)+"</td>");
    });
    o.push("<td>"+self.teamPlayers(t['id'],self.item['tournamentData']['players']).map(function(p) { return p['name']; }).join(",")+"</td>");
    o.push("</tr>");
  });
  o.push("</table>");

  return o.join("");
};

Tournament2Html.prototype.body3 = function() {
  var o = [];
  o.push("<table border=1><caption>Players ("+this.item['tournamentData']['players'].length+")</caption>");
  o.push("<tr>");
  o.push("<th>Team</th><th>Player</th>");
  o.push(this.echoAsTh(this.statNames));
  o.push("</tr>");
  var self = this;
  this.item['tournamentData']['players'].forEach(function(p) {
    t=self.teamById(p['teamId'],self.item);
    o.push("<tr><td>"+t['name']+"</td><td>"+p['name']+"</td>");
    self.statNames.forEach(function(sn) {
      o.push("<td>"+self.playerStatsByStatName(p['gameStats'],sn)+"</td>");
    });
    o.push("</tr>");
  });
  o.push("</table>");
  return o.join("");
};

Tournament2Html.prototype.body4 = function() {
  var o = [];

  for(var gsi in this.gameStates) {
    var gs = this.gameStates[gsi];
    var games=this.item['tournamentData']['games'].filter(function(g) { return g['state']==gs; });
    if(games.length==0) {
      o.push("<div>Games: "+gs+" - None</div>");
    } else {
      switch(gs) {
        case "Playing":
        case "Done":
          o.push("<h2>Games: "+gs+": "+games.length+"</h2>");
          for(var gi in games) {
            var g = games[gi];
            var t1=this.teamById(g['team1Id'],this.item);
            var t2=this.teamById(g['team2Id'],this.item);
            o.push("<div>"+t1['name']+" x "+t2['name']);
            o.push("<table border=1>");
            o.push("<tr>");
            o.push("<th>Team</th><th>Player</th>");
            o.push(this.echoAsTh(this.statNames));
            o.push("</tr>");
            var txs = [t1,t2];
            for(var txi in txs) {
              var tx = txs[txi];
              var ps = this.teamPlayers(tx['id'],this.item['tournamentData']['players']);
              for(var pi in ps) {
                var p = ps[pi];
                o.push("<tr><td>"+tx['name']+"</td><td>"+p['name']+"</td>");
                var gaa=p['gameStats'].filter(function(gs) { return gs['gid']==g['id']; });
                if(gaa.length!=1) throw("Faild to find game stats");
                for(var sni in this.statNames) {
                  var sn = this.statNames[sni];
                  o.push("<td>"+this.playerStatsByStatName(gaa,sn)+"</td>");
                }
                o.push("</tr>");
              }
            }
            o.push("</table>");
            o.push("</div>");
          }
          o.push("</table>");
          break;
        case "Waiting":
          o.push("<ul>Games: gs ("+games.length+")");
          for(var gi in games) {
            var g = games[gi];
            var t1=teamById(g['team1Id'],this.item);
            var t2=teamById(g['team2Id'],this.item);
            o.push("<li>"+t1['name']+" x "+t2['name']+"</li>");
          }
          o.push("</ul>");
          break;
        default:
          die("Invalid game state");
      }
    }
  }
  return o.join("");
};

Tournament2Html.prototype.html = function() {
  var html = [
    "<html xmlns='http://www.w3.org/1999/xhtml' xmlns:og='http://ogp.me/ns#'>",
    "<head>",
    this.header(),
    "</head>",
    "<body>",
    this.body1(),
    this.body2(),
    this.body3(),
    this.body4(),
    "</body>",
    "</html>"
  ];
  html = html.join("");
  return html;
};

Tournament2Html.prototype.Tournament2Html = Tournament2Html;

module.exports = function (item) {
  return new Tournament2Html(item);
};
