var AWS = require("aws-sdk");
var doc = require('dynamodb-doc'); // https://www.npmjs.com/package/dynamodb-doc
var config = require('app/config.json');

AWS.config.update({region: config.AWS_REGION});

// JS Class declaration
// For nodejs exports, check bottom of file
var YoloBearTournament = function() {
  this.dynamo = new doc.DynamoDB();
};

YoloBearTournament.prototype.list = function(context) {
  this.dynamo.scan(
    { "TableName":"yolo-bear-tournaments" },
    function(err,data) {
      if(err!=null) {
        context.fail("Error listing tournaments. "+err);
        return;
      }

      // no data
      if(data==null||Object.keys(data).length==0) {
        context.succeed("{}");
        return;
      }

      // at this point, data.Items is an array of objects as follows
      // { key: value,
      //   email: 'Chajoubr@dm.net.lb',
      // }
      context.succeed(data.Items);

    }
  );
};

YoloBearTournament.prototype.drop=function(name, password, context) {
  this.get(name, {
    fail: context.fail,
    succeed: function(data,exists) {
      this.dynamo.deleteItem({
          "TableName":"yolo-bear-tournaments",
          "Key":{"tournamentName":name}
      }, function(err,data) {
          if(err!=null) {
            context.fail("Failed to remove from ddb. "+err);
            return;
          }
          context.succeed();
      }); 
    },
    true, // fail on not exist
    password
  });
};

YoloBearTournament.prototype.get = function(name, context, failOnNotExist, password) {
  this.dynamo.getItem({
      "TableName":"yolo-bear-tournaments",
      "Key":{"tournamentName":name}
  }, function(err,data) {

    if(err!=null) {
      context.fail("Failed to check existence in ddb. "+err);
      return;
    }

    var exists = data!=null && Object.keys(data).length!=0;

    if(typeof failOnNotExist!=='undefined' && failOnNotExist) {
      if(!exists) {
        context.fail("Key doesnt exist");
        return;
      }
    }

    if(typeof password!=='undefined' && password) {
      if(exists && password!=data.tournamentPassword) {
        context.fail("Wrong password");
        return;
      }
    }

    context.succeed(data,exists);
  });
};

YoloBearTournament.prototype.new = function(name, password, data, context) {

  this.get(name, {
    fail: context.fail,
    succeed: function(data,exists) {
      this.dynamo.putItem({
         "TableName":"yolo-bear-tournaments",
         "Item":{tournamentName:name,tournamentPassword:password,tournamentData:data}
      },function(err,data) {
         if(err!=null) {
           // http://docs.aws.amazon.com/lambda/latest/dg/programming-model.html
           context.fail("Failed to put to dynamodb. "+err);
           return;
         }
         // return
         context.succeed();
      });
    },
    false, // fail on not exist
    password
  });

};

YoloBearTournament.prototype.YoloBearTournament = YoloBearTournament;

module.exports = function () {
  return new YoloBearTournament();
};
