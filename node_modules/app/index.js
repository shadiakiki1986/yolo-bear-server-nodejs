'use strict';
var Tournament = require('app/Tournament');
var User = require('app/User');

module.exports.del = function(event,context) {
  if(!event.hasOwnProperty("tournamentName")) throw("Missing tournament name");
  if(!event.hasOwnProperty("tournamentPassword")) throw("Missing tournament password");
  if(!event.tournamentName) throw("Empty tournament name");
  if(!event.tournamentPassword) throw("Empty tournament password");
  var t = new Tournament();
  t.drop(event.tournamentName,event.tournamentPassword,context);
};

module.exports.forgotPassword = function(event,context) {
  if(!event.hasOwnProperty("email0")) throw("Missing email");
  if(!event.email0) throw("Empty email");
  var u = new User();
  u.forgotPassword(event.email0,context);
};

module.exports.getEmail = function(event,context) {
  if(!event.hasOwnProperty("email0")) throw("Missing email");
  if(!event.hasOwnProperty("pwd")) throw("Missing password");
  if(!event.email0) throw("Missing email");
  if(!event.pwd) throw("Missing password");
  var u = new User();
  u.get(event.email0,event.password,context);
};

module.exports.get = function(event,context) {
  if(!event.hasOwnProperty("tournamentName")) throw("Missing tournament name");
  if(!event.hasOwnProperty("format")) event.format="json";
  if(!event.tournamentName) throw("Empty tournament name");
  if(!event.format) throw("Empty format");
  if(event.format!="html"&&event.format!="json") throw("Format can only be html or json");
  var t = new Tournament();
  var context2 = {
    fail: context.fail,
    succeed: function(result,exists) { context.succeed(result); }
  };
  t.get(event.tournamentName,context2,true,false,event.format=="html");
};

module.exports.listNick = function(event,context) {
  var u = new User();
  u.list(context);
};

module.exports.list = function(event,context) {
  var t = new Tournament();
  t.list(context);
};

module.exports.new = function(event,context) {
  if(!event.hasOwnProperty("tournamentName")) throw("Missing tournament name");
  if(!event.hasOwnProperty("tournamentPassword")) throw("Missing tournament password");
  if(!event.hasOwnProperty("tournamentData")) throw("Missing tournament data");
  if(!event.tournamentName) throw("Missing tournament name");
  if(!event.tournamentPassword) throw("Missing tournament password");
  if(!event.tournamentData) throw("Missing tournament data");
  var t = new Tournament();
  t.new(event.tournamentName,event.tournamentPassword,event.tournamentData,context);
};

module.exports.putEmail = function(event,context) {
  if(!event.hasOwnProperty("email0")) throw("Missing email");
  if(!event.hasOwnProperty("pwd")) throw("Missing password");
  if(!event.email0) throw("Empty email");
  if(!event.pwd) throw("Empty password");
  if(!event.hasOwnProperty("nick")) throw("Missing nick");
  if(!event.hasOwnProperty("peerId")) throw("Missing peerId");
  if(!event.hasOwnProperty("metaD")) throw("Missing metaD");
  var u = new User();
  u.putEmail(event.email0,event.peerId,event.password,event.nick,event.metaD,context);
};

module.exports.putNick = function(event,context) {
  if(!event.hasOwnProperty("pwd")) throw("Missing password");
  if(!event.hasOwnProperty("nick")) throw("Missing nick");
  if(!event.hasOwnProperty("peerId")) throw("Missing peerId");
  if(!event.pwd) throw("Missing password");
  if(!event.peerId) throw("Missing peerId");
  var u = new User();
  u.putNick(event.peerId,event.password,event.nick,context);
};

