var AWS = require("aws-sdk");
var doc = require('dynamodb-doc'); // https://www.npmjs.com/package/dynamodb-doc
var config = require('app/config.json');
var MailManager = require('app/MailManager');

AWS.config.update({region: config.AWS_REGION});

// JS Class declaration
// For nodejs exports, check bottom of file
var User = function() {
  this.dynamo = new doc.DynamoDB();
};

User.prototype.get = function(email, password, context, treatInexistant) {
  this.dynamo.getItem({
      "TableName":"yolo-bear-users2",
      "Key":{"tournamentName":name}
  }, function(err,data) {

    if(err!=null) {
      context.fail("Failed to check existence in ddb. "+err);
      return;
    }

    var exists = data!=null && data.Item!=null && Object.keys(data.Item).length!=0;
    if(!exists) {
      if(typeof treatInexistant=='undefined'||!treatInexistant) {
        context.fail("Email doesnt exist");
        return;
      }

      // validate email
      MailManager.mailValidate(email, function(err, valid) {
        if(!valid) {
          context.fail("Invalid email");
          return;
        }
  
        // generate random password
        var p2 = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0,5);
        context.succeed({password: p2}, exists); // this is more or less a dummy
  
      });
      return;
    }

    if(exists && password!=data.Item.tournamentPassword) {
      context.fail("Wrong password");
      return;
    }

    context.succeed(data.Item, exists);
  });
};

User.prototype.list = function(context) {
  // first list all online users (registered + unregistered)
  this.dynamo.scan(
    { "TableName":"yolo-bear-users",
      'AttributesToGet': ['peerId','nick']
    },
    function(err,data1) {
      if(err!=null) {
        context.fail("Error listing online users. "+err);
        return;
      }

      // no data
      if(data1==null||Object.keys(data1).length==0) {
        context.succeed("{}");
        return;
      }

      // at this point, data.Items is an array of objects as follows
      // { key: value,
      //   email: 'Chajoubr@dm.net.lb',
      // }

      // Now retrieve the registered among those
      this.dynamo.scan(
        { "TableName":"yolo-bear-users2",
          'AttributesToGet': ['peerId','nick','email0'],
          'ScanFilter': {'peerId': {'ComparisonOperator': 'NOT_NULL'} }
        },
        function(err,data2) {
          if(err!=null) {
            context.fail("Error listing registered users. "+err);
            return;
          }
    
          // no data
          if(data2==null||Object.keys(data2).length==0) {
            context.succeed("{}");
            return;
          }
    
          // at this point, data2.Items is an array of objects as follows
          // { key: value,
          //   email: 'Chajoubr@dm.net.lb',
          // }

          // Now merge data1 with data2
          var merged={};
          data1.Items.forEach(function(v) {
            v2=data2.Items.filter(function(x) {
              return x['peerId']==v['peerId'] && x['nick']==v['nick'];
            });
            v3="";
            if(v2.length>1) throw new Exception("WTF");
            if(v2.length>0) v3=v2[0]['email0'];
            merged[v['peerId']]={nick: v['nick'], email0: v3};
          }

          // done
          context.succeed(merged);
        }
      );

    }
  );
};

User.prototype.putNick = function(peerId, password, nick, context) {
  var todayD=new Date().toISOString().substr(0,10);
  var piv = {
    peerId: peerId,
    password: password,
    nick: nick,
    lastUse: todayD
  };
  if(nick=="") delete piv.nick;

  this.dynamo.putItem(
    { TableName: "yolo-bear-users",
      Item: piv
    },
    function(err,data) {
      if(err!=null) {
        // http://docs.aws.amazon.com/lambda/latest/dg/programming-model.html
        context.fail("Failed to put to dynamodb. "+err);
        return;
      }
      // return
      context.succeed({});
    }
  );
};

User.prototype.putEmail = function( email, peerId, password, nick, metaD, context) {
  var context2 = {
    fail: context.fail,
    succeed: function(item, exists) {
      if(!exists) password = item.password; // this would be the new password
      var piv = {
        email0: email,
        peerId: peerId,
        password: password,
        nick: nick,
        metaD: metaD
      };
      if(nick=="") delete piv.nick;
      if(peerId=="") delete piv.peerId;
      if(metaD=="") delete piv.metaD;
    
      this.dynamo.putItem(
        { TableName: "yolo-bear-users2",
          Item: piv
        },
        function(err,data) {
          if(err!=null) {
            // http://docs.aws.amazon.com/lambda/latest/dg/programming-model.html
            context.fail("Failed to put to dynamodb. "+err);
            return;
          }

          // send email if email is newly registered
          if(!exists) {
            MailManager.mailSend(
              email,
              "Yolo-bear registration",
              "Welcome to yolo-bear. Your account's set password is "+password,
              { fail: context.fail,
                succeed: function(msg) {
                  // return
                  context.succeed({warning: "An email has been sent to you with the password to use."});
                }
              }
            );
          }

          context.succeed({});
        }
      );
    }
  };

  this.get( email, password, context2, true );

};

User.prototype.forgotPassword = function( email, context) {
  var context2 = {
    fail: context.fail,
    succeed: function(item, exists) {
      MailManager.mailSend(
        email,
        "Yolo-bear forgotten password",
        "Your account's password is "+item.pwd,
        { fail: context.fail,
          succeed: function(msg) {
            // return
            context.succeed({warning: "An email has been sent to you with your password. Please check your inbox and/or junk folder"});
          }
        }
      );
    }
  };

  this.get( email, password, context2 );

};


User.prototype.User = User;

module.exports = function () {
  return new User();
};
